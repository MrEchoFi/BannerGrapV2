
Flags:
  -f string
        File containing newline-separated targets (host or host:port)
  -proto string
        Protocol to use: http (default), https, ftp, smtp, ssh, telnet, custom
  -port string
        Override port for every target (overrides both target ports and defaults)
  -payload string
        Custom payload to send (default is protocol-specific)
  -timeout int
        Connection + read timeout in seconds (default 5)
  -threads int
        Number of simultaneous connections (default 10)
  -o string
        Output file path (.json or .csv, txt  inferred by extension; console if empty)

   -h    help
 
  ### Note: First-> read and learn this 'bannerGrap_Guid or Usage.txt' then read the new 'New_advanced_bashScripts.md' for this Version 2.0 cause this two usage is important for advanced bash scripting.

   ### USAGE:
	 ## step 1_Usage:
		
		go run bannerGrap.go example.com
		go run bannerGrap.go example.com:80
		go run bannerGrap.go example.com:443
		go run bannerGrap.go example.com:22
		go run bannerGrap.go example.com:25
		go run bannerGrap.go example.com:21
                go run bannerGrap.go -proto smtp mail.server.com

                go run bannerGrap.go -proto custom -payload "" host.example.com:1234

		go run bannerGrap.go -proto https example.com
		go run bannerGrap.go -proto http example.com
		go run bannerGrap.go -proto ftp example.com
		go run banner_grabber.go example.com:8080
		go run bannerGrap.go example.com:8080
		go run bannerGrap.go example.com:8080 -proto http
		go run bannerGrap.go example.com:8080 -proto https
		go run bannerGrap.go example.com:8080 -proto ftp
		go run bannerGrap.go example.com:8080 -proto smtp
		go run bannerGrap.go example.com:8080 -proto ssh
		go run bannerGrap.go example.com:8080 -proto telnet
		go run bannerGrap.go example.com:8080 -proto custom
		go run bannerGrap.go example.com:8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"
		go run bannerGrap.go example.com:8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10
		go run bannerGrap.go example.com:8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5
		go run bannerGrap.go example.com:8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.json
		go run bannerGrap.go example.com:8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.csv
		go run bannerGrap.go example.com:8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt
		go run bannerGrap.go example.com:8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt
                go run bannerGrap.go -port 22 host1 host2 host3
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto http
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto https
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto ftp
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto smtp
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto ssh
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto telnet
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto custom
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.json
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.csv
		go run bannerGrap.go -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt
		
       step-2 Usage:

	   //Example of File-Based Bulk Scans-

	    i] Prepare a file targets.txt or any name u want with the following format:
		 make file- # My list of FTP servers
                      ftp.site1.com
                      ftp.site2.com:2121
					  ftp.site3.com:21
					  ftp.site4.com:22
        //by this u can scan all entries in targets.txt	

        ii] You can create thousand_hosts.txt directly from your terminal using common shell tools like echo, seq, or for loops.
		Here are several ways, depending on what kind of hosts you want:
     ## Basic Manual Creation (Just a few lines to test):
		echo "example.com" > thousand_hosts.txt
		echo "example.com:80" >> thousand_hosts.txt
		echo "example.com:443" >> thousand_hosts.txt
		echo "example.com:22" >> thousand_hosts.txt
		echo "api.github.com" >> thousand_hosts.txt
		echo "api.github.com:80" >> thousand_hosts.txt
		echo "api.github.com:443" >> thousand_hosts.txt
		echo "google.com" >> thousand_hosts.txt
		echo "google.com:80" >> thousand_hosts.txt
		echo "google.com:443" >> thousand_hosts.txt
		echo "google.com:22" >> thousand_hosts.txt

	## Generate 1000 Fake Hosts (like host1.com, host2.com...):
		for i in $(seq 1 1000); do echo "host$i.com" >> thousand_hosts.txt; done

		Output: 
		 host1.com
         host2.com
         ...
         host1000.com


	## Generate 1000 Fake Hosts with Ports (like host1.com:80, host2.com:443...):
		for i in $(seq 1 1000); do echo "host$i.com:$(($i % 65535 + 1))" >> thousand_hosts.txt; done

	## Generate 1000 Fake Hosts with Random Ports (like host1.com:1234, host2.com:5678...):
		for i in $(seq 1 1000); do echo "host$i.com:$(($RANDOM % 65535 + 1))" >> thousand_hosts.txt; done

	## Generate 1000 Fake Hosts with Random Ports and Protocols (like host1.com:80, host2.com:443...):
		for i in $(seq 1 1000); do echo "host$i.com:$(($RANDOM % 65535 + 1))" >> thousand_hosts.txt; done

	## Generate 1000 Fake Hosts with Random Ports and Protocols (like host1.com:80, host2.com:443...):
		for i in $(seq 1 1000); do echo "host$i.com:$(($RANDOM % 65535 + 1))" >> thousand_hosts.txt; done

	## Generate 1000 Local IPs (192.168.1.X):
		for i in $(seq 1 1000); do echo "192.168.1.$i" >> thousand_hosts.txt; done
		for i in $(seq 1 254); do echo "192.168.1.$i"; done > thousand_hosts.txt

	## Generate 1000 Local IPs with Random Ports (192.168.1.X:1234):
		for i in $(seq 1 1000); do echo "192.168.1.$i:$(($RANDOM % 65535 + 1))" >> thousand_hosts.txt; done
		for i in $(seq 1 254); do echo "192.168.1.$i:$(($RANDOM % 65535 + 1))"; done > thousand_hosts.txt

	## Generate 1000 Local IPs with Random Ports and Protocols (192.168.1.X:1234):
		for i in $(seq 1 1000); do echo "192.168.1.$i:$(($RANDOM % 65535 + 1))" >> thousand_hosts.txt; done
		for i in $(seq 1 254); do echo "192.168.1.$i:$(($RANDOM % 65535 + 1))"; done > thousand_hosts.txt
	
	## If you want exactly 1000 IPs, you can extend it:
	 	for i in $(seq 1 1000); do echo "192.168.1.$(($i % 254 + 1)):$((($i * 1234) % 65535 + 1))" >> thousand_hosts.txt; done
		for i in $(seq 1 4); do for j in $(seq 1 254); do echo "192.168.$i.$j"; done; done | head -n 1000 > thousand_hosts.txt

	## Generate 1000 Local IPs with Random Ports and Protocols (192.168.1.X:1234):
		for i in $(seq 1 1000); do echo "192.168.1.$(($i % 254 + 1)):$((($i * 1234) % 65535 + 1))" >> thousand_hosts.txt; done
		for i in $(seq 1 4); do for j in $(seq 1 254); do echo "192.168.$i.$j:$((($i * $j) % 65535 + 1))"; done; done | head -n 1000 > thousand_hosts.txt

	## Generate 1000 Local IPs with Random Ports and Protocols (192.168.1.X:1234):
		for i in $(seq 1 1000); do echo "192.168.1.$(($i % 254 + 1)):$((($i * 1234) % 65535 + 1))" >> thousand_hosts.txt; done
		for i in $(seq 1 4); do for j in $(seq 1 254); do echo "192.168.$i.$j:$((($i * $j) % 65535 + 1))"; done; done | head -n 1000 > thousand_hosts.txt

	##  Combine Domains and IPs Randomly:
	     (echo "example.com"; echo "api.site.net"; for i in $(seq 1 998); do echo "192.168.0.$i"; done) > thousand_hosts.txt

	##  Combine Domains and IPs Randomly with Ports:
	     (echo "example.com:80"; echo "api.site.net:443"; for i in $(seq 1 998); do echo "192.168.0.$i:$(($RANDOM % 65535 + 1))"; done) > thousand_hosts.txt

	##  Combine Domains and IPs Randomly with Ports and Protocols:
	     (echo "example.com:80"; echo "api.site.net:443"; for i in $(seq 1 998); do echo "192.168.0.$i:$(($RANDOM % 65535 + 1))"; done) > thousand_hosts.txt
	

    Note of Recomendations:  To verify your file:
		# Check if the file exists,

	         cat thousand_hosts.txt | head   # Show top 10 lines
             wc -l thousand_hosts.txt        # Count number of lines
			 tail -n 10 thousand_hosts.txt   # Show last 10 lines
			 grep -E '^[^:]+:[0-9]+$' thousand_hosts.txt # Show lines with host:port format
			 grep -E '^[^:]+$' thousand_hosts.txt # Show lines with host format
			 grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+$' thousand_hosts.txt # Show lines with IP:port format
			 grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' thousand_hosts.txt # Show lines with IP format
			 grep -E '^[^:]+:[0-9]+$' thousand_hosts.txt | sort -u # Show unique host:port lines



		//by this u can scan all entries in targets.txt	or	thousand_hosts.txt//  

       

		go run bannerGrap.go -f targets.txt
		go run bannerGrap.go -f targets.txt -proto http
		go run bannerGrap.go -f targets.txt -proto https
		go run bannerGrap.go -f targets.txt -proto ftp
		go run bannerGrap.go -f targets.txt -proto smtp
		go run bannerGrap.go -f targets.txt -proto ssh
		go run bannerGrap.go -f targets.txt -proto telnet
		go run bannerGrap.go -f targets.txt -proto custom
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.json
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.csv
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt
		go run bannerGrap.go -f targets.txt -port 22 host1 host2 host3
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto http
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto https
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto ftp
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto smtp
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto ssh
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto telnet
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.json
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.csv
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt
		go run bannerGrap.go -f targets.txt -port 22 host1:22 host2:22 host3:22 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt

		go run bannerGrap.go -f targets.txt -port 21 -proto ftp
		go run bannerGrap.go -f targets.txt -port 22 -proto ssh
		go run bannerGrap.go -f targets.txt -port 25 -proto smtp
		go run bannerGrap.go -f targets.txt -port 80 -proto http
		go run bannerGrap.go -f targets.txt -port 443 -proto https
		go run bannerGrap.go -f targets.txt -port 8080 -proto http
		go run bannerGrap.go -f targets.txt -port 8080 -proto https
		go run bannerGrap.go -f targets.txt -port 8080 -proto ftp
		go run bannerGrap.go -f targets.txt -port 8080 -proto smtp
		go run bannerGrap.go -f targets.txt -port 8080 -proto ssh
		go run bannerGrap.go -f targets.txt -port 8080 -proto telnet
		go run bannerGrap.go -f targets.txt -port 8080 -proto custom
		go run bannerGrap.go -f targets.txt -port 8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"
		go run bannerGrap.go -f targets.txt -port 8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10
		go run bannerGrap.go -f targets.txt -port 8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5
		go run bannerGrap.go -f targets.txt -port 8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.json
		go run bannerGrap.go -f targets.txt -port 8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.csv
		go run bannerGrap.go -f targets.txt -port 8080 -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o output.txt

	//Custom Payloads: Send your own payload(SMTP VRFY or EXPN, FTP USER, etc.)
	    
	    go run bannerGrap.go -proto smtp -payload "VRFY postmaster\r\n" mail.example.com
		go run bannerGrap.go -proto smtp -payload "EXPN postmaster\r\n" mail.example.com
		go run bannerGrap.go -proto ftp -payload "USER anonymous\r\n" ftp.example.com
		go run bannerGrap.go -proto ssh -payload "SSH-2.0-OpenSSH_7.4\r\n" ssh.example.com
		go run bannerGrap.go -proto telnet -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" telnet.example.com
		go run bannerGrap.go -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" custom.example.com
		go run bannerGrap.go -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" custom.example.com:8080
		go run bannerGrap.go -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" custom.example.com:8080 -timeout 10
		go run bannerGrap.go -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" custom.example.com:8080 -timeout 10 -threads 5
		go run bannerGrap.go -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" custom.example.com:8080 -timeout 10 -threads 5 -o output.json
		go run bannerGrap.go -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" custom.example.com:8080 -timeout 10 -threads 5 -o output.csv
		go run bannerGrap.go -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" custom.example.com:8080 -timeout 10 -threads 5 -o output.txt

	//Raw TCP grab without any payload:
		go run bannerGrap.go -proto raw -payload "" example.com:80
		go run bannerGrap.go -proto raw -payload "" example.com:443
		go run bannerGrap.go -proto raw -payload "" example.com:21
		go run bannerGrap.go -proto raw -payload "" example.com:22
		go run bannerGrap.go -proto raw -payload "" example.com:25
		go run bannerGrap.go -proto raw -payload "" example.com:8080
		go run bannerGrap.go -proto raw -payload "" example.com:8080 -timeout 10
		go run bannerGrap.go -proto raw -payload "" example.com:8080 -timeout 10 -threads 5
		go run bannerGrap.go -proto raw -payload "" example.com:8080 -timeout 10 -threads 5 -o output.json
		go run bannerGrap.go -proto raw -payload "" example.com:8080 -timeout 10 -threads 5 -o output.csv
		go run bannerGrap.go -proto raw -payload "" example.com:8080 -timeout 10 -threads 5 -o output.txt
		go run bannerGrap.go -proto raw -payload "" example.com:8080 -timeout 10 -threads 5 -o output.txt

		go run bannerGrap.go -proto custom -payload "" host.example.com:1234
		go run bannerGrap.go -proto custom -payload "" host.example.com:1234 -timeout 10
		go run bannerGrap.go -proto custom -payload "" host.example.com:1234 -timeout 10 -threads 5
		go run bannerGrap.go -proto custom -payload "" host.example.com:1234 -timeout 10 -threads 5 -o output.json
		go run bannerGrap.go -proto custom -payload "" host.example.com:1234 -timeout 10 -threads 5 -o output.csv
		go run bannerGrap.go -proto custom -payload "" host.example.com:1234 -timeout 10 -threads 5 -o output.txt
		
	//1.1 High-Concurrency / Fast Scans:
	    go run bannerGrap.go -f targets.txt -proto http -threads 50	
		go run bannerGrap.go -f targets.txt -proto https -threads 50
		go run bannerGrap.go -f targets.txt -proto ftp -threads 50
		go run bannerGrap.go -f targets.txt -proto smtp -threads 50
		go run bannerGrap.go -f targets.txt -proto ssh -threads 50
		go run bannerGrap.go -f targets.txt -proto telnet -threads 50
		go run bannerGrap.go -f targets.txt -proto custom -threads 50
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -threads 50
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -threads 50 -o output.json
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -threads 50 -o output.csv
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -threads 50 -o output.txt
    
	//1.2 Increase threads to 100 for very large lists:
		go run bannerGrap.go -f targets.txt -proto http -threads 100
		go run bannerGrap.go -f targets.txt -proto https -threads 100
		go run bannerGrap.go -f targets.txt -proto ftp -threads 100
		go run bannerGrap.go -f targets.txt -proto smtp -threads 100
		go run bannerGrap.go -f targets.txt -proto ssh -threads 100
		go run bannerGrap.go -f targets.txt -proto telnet -threads 100
		go run bannerGrap.go -f targets.txt -proto custom -threads 100
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -threads 100
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -threads 100 -o output.json
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -threads 100 -o output.csv
		go run bannerGrap.go -f targets.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -threads 100 -o output.txt

		extreme_1.2:

		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 2
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 1
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 0.5
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 0.1
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 0.01
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 0.001
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 0.0001
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 0.00001
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 0.000001
		go run bannerGrap.go -f biglist.txt -threads 100 -timeout 0.0000001

	//Low-timeout “fast-fail” mode (1 s timeout):
	   go run bannerGrap.go -f hosts.txt -threads 50 -timeout 1
	   go run bannerGrap.go -f hosts.txt -threads 100 -timeout 1
	   go run bannerGrap.go -f hosts.txt -threads 200 -timeout 1
	   go run bannerGrap.go -f hosts.txt -threads 500 -timeout 1
	   go run bannerGrap.go -f hosts.txt -threads 1000 -timeout 1
	   go run bannerGrap.go -f hosts.txt -threads 2000 -timeout 1
	   go run bannerGrap.go -f hosts.txt -threads 5000 -timeout 1

Step-3: Usage: 
   Output Formats: 

   i] JSON output:
      go run bannerGrap.go -f hosts.txt -o results.json
   ii] CSV output: 
      go run bannerGrap.go -f hosts.txt -o results.csv
   iii] Text output: 
      go run bannerGrap.go -f hosts.txt -o results.txt
   iv] Console output:
      go run bannerGrap.go -f hosts.txt
   v] JSON output with custom payload:
    go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -o results.json
   vi] CSV output with custom payload:
	   	go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -o results.csv
   vii] Text output with custom payload:
		go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -o results.txt
	viii] Console output with custom payload:
			go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"
	ix] JSON output with custom payload and timeout:
			go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -o results.json
	x] CSV output with custom payload and timeout:
		go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -o results.csv
	xi] Text output with custom payload and timeout:
	    	go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -o results.txt
	xii] Console output with custom payload and timeout:
        	go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10
	xiii] JSON output with custom payload and timeout and threads:
		   go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o results.json
	xiv] CSV output with custom payload and timeout and threads:
			go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o results.csv
    xv] Text output with custom payload and timeout and threads:
			go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -o results.txt
	xvi] Console output with custom payload and timeout and threads:
		go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5
    xvii] JSON output with custom payload and timeout and threads and port:
        go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -port 80 -o results.json
     xviii] CSV output with custom payload and timeout and threads and port:
        go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -port 80 -o results.csv
    xix] Text output with custom payload and timeout and threads and port:
	    go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -port 80 -o results.txt
    xx] Console output with custom payload and timeout and threads and port:
       go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -port 80
    xxi] JSON output with custom payload and timeout and threads and port and protocol:
       go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -port 80 -proto http -o results.json
    xxii] CSV output with custom payload and timeout and threads and port and protocol:
       go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -port 80 -proto http -o results.csv
    xxiii] Text output with custom payload and timeout and threads and port and protocol:
       go run bannerGrap.go -f hosts.txt -proto custom -payload "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" -timeout 10 -threads 5 -port 80 -proto http -o results.txt
    
Step-3: “Extreme” Combined:
    3.1]
    //Scan 1,000 hosts, all on port 443 via HTTPS, with custom headers, 200 concurrent workers, and dump to CSV:

   go run bannerGrap.go \
  -f thousand_hosts.txt \
  -proto https \
  -port 443 \
  -payload "GET /status HTTP/1.1\r\nHost: %s\r\nUser-Agent: BannerBot/1.0\r\n\r\n" \
  -threads 200 \
  -timeout 3 \
  -o full_scan.csv

  //Scan 1,000 hosts, all on port 443 via HTTPS, with custom headers, 200 concurrent workers, and dump to JSON:

  go run bannerGrap.go \
  -f thousand_hosts.txt \
  -proto https \
  -port 443 \
  -payload "GET /status HTTP/1.1\r\nHost: %s\r\nUser-Agent: BannerBot/1.0\r\n\r\n" \
  -threads 200 \
  -timeout 3 \
  -o full_scan.json

  //Scan 1,000 hosts, all on port 443 via HTTPS, with custom headers, 200 concurrent workers, and dump to console:

  go run bannerGrap.go \
  -f thousand_hosts.txt \
  -proto https \
  -port 443 \
  -payload "GET /status HTTP/1.1\r\nHost: %s\r\nUser-Agent: BannerBot/1.0\r\n\r\n" \
  -threads 200 \
  -timeout 3 \
  -o full_scan.txt

  //Scan 1,000 hosts, all on port 443 via HTTPS, with custom headers, 200 concurrent workers, and dump to console:

  go run bannerGrap.go \
  -f thousand_hosts.txt \
  -proto https \
  -port 443 \
  -payload "GET /status HTTP/1.1\r\nHost: %s\r\nUser-Agent: BannerBot/1.0\r\n\r\n" \
  -threads 200 \
  -timeout 3 \
  -o full_scan.txt


 3.2] //  Massive HTTPS Scan with Custom Header & CSV Output: Scan 10 000 domains over TLS, 500 threads, 2 s timeout, dump to CSV-
 
 go run bannerGrap.go \
  -f ten_thousand_domains.txt \
  -proto https \
  -port 443 \
  -payload "GET / HTTP/1.1\r\nHost: %s\r\nUser-Agent: AggroBot/5.0\r\nAccept: */*\r\n\r\n" \
  -threads 500 \
  -timeout 2 \
  -o https_scan_results.csv

 //  Massive HTTPS Scan with Custom Header & JSON Output: Scan 10 000 domains over TLS, 500 threads, 2 s timeout, dump to JSON-

 go run bannerGrap.go \
  -f ten_thousand_domains.txt \
  -proto https \
  -port 443 \
  -payload "GET / HTTP/1.1\r\nHost: %s\r\nUser-Agent: AggroBot/5.0\r\nAccept: */*\r\n\r\n" \
  -threads 500 \
  -timeout 2 \
  -o https_scan_results.json

 //  Massive HTTPS Scan with Custom Header & Console Output: Scan 10 000 domains over TLS, 500 threads, 2 s timeout, dump to console-

 go run bannerGrap.go \
  -f ten_thousand_domains.txt \
  -proto https \
  -port 443 \
  -payload "GET / HTTP/1.1\r\nHost: %s\r\nUser-Agent: AggroBot/5.0\r\nAccept: */*\r\n\r\n" \
  -threads 500 \
  -timeout 2 \
  -o https_scan_results.txt

 3.3] Ultra-Fast HTTP Sweep on IP Range: Hit 192.168.1.1–254 on port 80 with 254 threads and 1 s timeout-

 go run bannerGrap.go \
  -f thousand_hosts.txt \
  -proto http \
  -port 80 \
  -payload "GET / HTTP/1.1\r\nHost: %s\r\nUser-Agent: AggroBot/5.0\r\nAccept: */*\r\n\r\n" \
  -threads 254 \
  -timeout 1 \
  -o http_sweep.csv

//////
go run banner_grabber.go \
  -f <(for i in $(seq 1 254); do echo \"192.168.1.$i\"; done) \
  -proto http \
  -threads 254 \
  -timeout 1
  -o http_sweep.csv
  -o http_sweep.json
  -o http_sweep.txt

3.4] SMTP Banner Harvesting in Bulk (JSON): Pull EHLO banners from mail servers list, override port to 25, output JSON-
      
//Pull EHLO banners from mail servers list, override port to 25, output JSON-
  go run bannerGrap.go \
  -f mail_hosts.txt \
  -proto smtp \
  -port 25 \
  -threads 100 \
  -timeout 5 \
  -o smtp_banners.json

//Pull HTTP banners from web servers list, override port to 80, output CSV-
  go run bannerGrap.go \
  -f web_hosts.txt \
  -proto http \
  -port 80 \
  -threads 50 \
  -timeout 3 \
  -o http_banners.csv
//Pull FTP banners from FTP servers list, override port to 21, output JSON-
  go run bannerGrap.go \
  -f ftp_hosts.txt \
  -proto ftp \
  -port 21 \
  -threads 20 \
  -timeout 2 \
  -o ftp_banners.json
//Pull SSH banners from SSH servers list, output JSON-
  go run bannerGrap.go \
  -f ssh_hosts.txt \
  -proto ssh \
  -threads 10 \
  -timeout 5 \
  -o ssh_banners.json
//Pull Telnet banners from Telnet servers list, output CSV-
  go run bannerGrap.go \
  -f telnet_hosts.txt \
  -proto telnet \
  -threads 10 \
  -timeout 5 \
  -o telnet_banners.csv
//Pull custom banners from custom servers list, output JSON-
  go run bannerGrap.go \
  -f custom_hosts.txt \
  -proto custom \
  -payload "GET / HTTP/1.1\r\nHost: %s\r\n\r\n" \
  -threads 10 \
  -timeout 5 \
  -o custom_banners.json

3.5] FTP Anonymous Banner Grab: Scan FTP servers (file lists mixed hostnames & IPs), force port 21, no custom payload needed-

go run bannerGrap.go \
  -f ftp_targets.txt \
  -proto ftp \
  -port 21 \
  -threads 150 \
  -timeout 4 \
  -o ftp_banners.csv

3.6] SSH Welcome Message Blitz: Read SSH welcomes from 1 000 hosts, port 22, high concurrency, console output-
go run bannerGrap.go \
  -f thousand_hosts.txt \
  -proto ssh \
  -port 22 \
  -threads 300 \
  -timeout 3

  3.7] Telnet Service Fingerprinting: Connect to Telnet on mixed IPv4 & IPv6 targets, port 23-
go run bannerGrap.go \
  -f mixed_targets.txt \
  -proto telnet \
  -port 23 \
  -threads 100 \
  -timeout 5 \
  -o telnet_fingerprints.json

3.8] Custom TCP Payload for Proprietary Service: Send a proprietary “HELLO\n” payload to a custom daemon on port 9000-
  go run bannerGrap.go \
  -f custom_daemon_hosts.txt \
  -proto custom \
  -port 9000 \
  -payload "HELLO\n" \
  -threads 50 \
  -timeout 6 \
  -o daemon_responses.csv

 3.9] Mixed-Protocol One-Liner:Scan HTTP, then HTTPS, then SMTP sequentially (three invocations) on a single host:
   go run bannerGrap.go example.com                       # HTTP:80  
   go run bannerGrap.go -proto https example.com          # HTTPS:443  
   go run bannerGrap.go -proto smtp example.com:25        # SMTP:25


3.10] Internal LAN Audit: Check local hostnames and IPs in internal_targets.txt, console output-
 
 go run banner_grabber.go \
  -f internal_targets.txt \
  -threads 50 \
  -timeout 3
 
 3.11]IPv6-Only Enumeration:Scan a list of IPv6 hosts on HTTPS, 100 threads-
  
go run bannerGrap.go \
  -f ipv6_hosts.txt \
  -proto https \
  -port 443 \
  -threads 100 \
  -timeout 4 \

3.12} “All-In-One” Aggressive Sweep:One command to test HTTP, HTTPS, SMTP, SSH, FTP on the same file by chaining flags and targets inline:

go run bannerGrap.go \
-f vip_targets.txt \
  -threads 250 \
  -timeout 3 \
  -o full_report.json \
  && go run bannerGrap.go -f vip_targets.txt -proto https -threads 250 -timeout 3 -o full_report_https.json \
  && go run bannerGrap.go -f vip_targets.txt -proto smtp  -threads 250 -timeout 3 -o smtp_report.json \
  && go run bannerGrap.go -f vip_targets.txt -proto ssh   -threads 250 -timeout 3 -o ssh_report.json \
  && go run bannerGrap.go -f vip_targets.txt -proto ftp   -threads 250 -timeout 3 -o ftp_report.json

3.13] 10K HTTPS Hosts, CSV, Fast-Fail:
go run bannerGrap.go \
  -f ten_thousand.txt \
  -proto https \
  -port 443 \
  -threads 500 \
  -timeout 2 \
  -max 2048 \
  -o https_fast.csv

3.14] 254-Thread LAN HTTP Sweep

go run bannerGrap.go \
  -f <(for i in $(seq 1 254); do echo "192.168.1.$i"; done) \
  -threads 254 \
  -timeout 1

3.15] Bulk SMTP JSON Harvest:

go run bannerGrap.go \
  -f mail_hosts.txt \
  -proto smtp \
  -port 25 \
  -threads 200 \
  -timeout 5 \
  -o smtp_banners.json

3.16] FTP Anonymous & CSV:

go run bannerGrap.go \
  -f ftp_list.txt \
  -proto ftp \
  -port 21 \
  -threads 150 \
  -o ftp_out.csv

3.17]SSH Welcome Blitz:

go run bannerGrap.go \
  -f hosts_ipv6_and_ipv4.txt \
  -proto ssh \
  -port 22 \
  -threads 300 \
  -timeout 3 \
  -v

3.18]Telnet Fingerprinting:

go run bannerGrap.go \
  -f mixed_targets.txt \
  -proto telnet \
  -port 23 \
  -threads 100 \
  -timeout 4 \
  -o telnet.json

3.19] Custom Daemon Probe:

go run bannerGrap.go \
  -f daemon_hosts.txt \
  -proto custom \
  -port 9000 \
  -payload "HELLO\n" \
  -threads 50 \
  -timeout 6 \
  -o daemon.csv

3.20] Chained Multi-Protocol Sweep:

# HTTP
go run bannerGrap.go -f vip.txt -threads 250 -timeout 3 -o http.csv \
&& \
# HTTPS
go run bannerGrap.go -f vip.txt -proto https -threads 250 -timeout 3 -o https.csv \
&& \
# SMTP
go run bannerGrap.go -f vip.txt -proto smtp -threads 250 -timeout 3 -o smtp.csv \
&& \
# SSH
go run bannerGrap.go -f vip.txt -proto ssh -threads 250 -timeout 3 -o ssh.csv \
&& \
# FTP
go run bannerGrap.go -f vip.txt -proto ftp -threads 250 -timeout 3 -o ftp.csv

3.21]IPv6-Only HTTPS Audit:

go run bannerGrap.go \
  -f ipv6_hosts.txt \
  -proto https \
  -threads 100 \
  -timeout 4 \
  -v

3.22]  Version & Help:

go run bannerGrap.go --version
go run bannerGrap.go -h






  ///////Mix, match, and tweak these to your heart’s content. Whether you’re storming data centers or scanning local labs,
  //  bannerGrap.go is armed for maximum throughput, deep fingerprinting, and streamlined output in JSON or CSV.

*/